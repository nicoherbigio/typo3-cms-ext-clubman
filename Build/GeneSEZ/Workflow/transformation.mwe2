module de.systemmacher.typo3cms.ext.clubman

/**
 * (c) Nico Herbig (Systemmacher)
 * All rights reserved.
 */

var uml2setup = org.genesez.adapter.uml2.workflow.UmlSetup {
	standardUML2Setup = true
}
var gcore = org.eclipse.xtend.typesystem.emf.EmfMetaModel {
	metaModelPackage = "org.genesez.metamodel.gcore.GcorePackage"
}
var uml = org.eclipse.xtend.typesystem.uml2.UML2MetaModel {}

///////////////////////////////////////////////////////////////////////////////

// define a property for the file path and name of the UML2 model input
var uml2modelfile = "Documentation/ModelCache/clubman.uml"
// define a property for the file path and name of the GeneSEZ model output
var gcoremodelfile = "Documentation/ModelCache/clubman.xmi"
// define a property for the output dir
var outputDir = "."

// define a property for the extension vendor name
var extensionVendorName = "NicoHerbigIo"
// define a property for the extension key
var extensionKey = "clubman"

///////////////////////////////////////////////////////////////////////////////

Workflow {
	// read the exported UML2 model file
	component = org.genesez.workflow.EmfReader {
		slot = "uml2model"

		file = uml2modelfile
	}

	// validate the UML2 model for transformability
	component = org.genesez.workflow.xpand.ValidatorComponent {
		metaModel = uml
		slot = "uml2model"

		validator = org.genesez.adapter.uml2.workflow.UmlModelValidation {}
	}

	// transform the UML2 model into a GeneSEZ model
	component = org.genesez.workflow.xpand.Model2ModelComponent {
		metaModel = uml
		metaModel = gcore
		slot = "uml2model"
		outputSlot = "coremodel"

		model2model = org.genesez.adapter.uml2.workflow.Uml2Gcore {}
	}

	// validate the GeneSEZ model against several constraints (Gcore, PHP, TYPO3 CMS, TYPO3 Extbase + Fluid)
	component = org.genesez.workflow.xpand.ValidatorComponent {
		metaModel = gcore

		validator = org.genesez.workflow.SimpleValidator {
			script = "org::genesez::metamodel::core::util::validation::Constraints"
		}
		//validator = org.genesez.workflow.SimpleValidator {
		//	script = "org::genesez::platform::php::validation::Constraints"
		//}
		validator = org.genesez.workflow.SimpleValidator {
			script = "org::genesez::platform::typo3::cms::validation::Constraints"
			parameter = org.genesez.workflow.Parameter {
				name = "extensionKey"
				value = extensionKey
			}
		}
		validator = org.genesez.workflow.SimpleValidator {
			script = "org::genesez::platform::typo3::cms::mvc::validation::Constraints"
		}
	}

	// modifiy the GeneSEZ model for TYPO3 Extbase + Fluid compliance
	component = org.genesez.workflow.xpand.ModelModificationComponent {
		metaModel = gcore

		model2model = org.genesez.platform.typo3.workflow.Typo3ModelModificationScript {}
	}

	// serialize the GeneSEZ model - just for info if you want to have a look at it
	component = org.genesez.workflow.EmfWriter {
		file = gcoremodelfile
	}

	// transform the GeneSEZ model into source code
	component = org.genesez.workflow.xpand.Model2TextSupport {
		component = org.genesez.platform.typo3.workflow.Typo3Model2TextComponent {
			metaModel = gcore

			extensionVendorName = extensionVendorName
			extensionKey = extensionKey

			outputDir = outputDir
			typeMappingFile = "typemapping.xml"
			model2text = org.genesez.platform.typo3.workflow.Gcore2Typo3 { }

			aopTemplate = "org::genesez::platform::typo3::cms::mvc::m2t::aop::BugFixOfTransientAnnotation"
			aopTemplate = "org::genesez::platform::typo3::cms::mvc::m2t::aop::DisableGenerationOfLocallangCshXlf"

			aopTemplate = "Customization"
			aopTemplate = "ComposerJson"

		}
		fileDeletion = org.genesez.m2t.deletion.FileDeletion {
			enabled = false
		}
		folderDeletion = org.genesez.m2t.deletion.FolderDeletion {
			enabled = false
		}
	}
}
